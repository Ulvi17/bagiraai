// Set current year in footer
document.addEventListener('DOMContentLoaded', function() {
  const currentYearElement = document.getElementById('currentYear');
  if (currentYearElement) {
    currentYearElement.textContent = new Date().getFullYear();
  }
});

// VAPI Configuration with working CDN
var vapiInstance = null;
var vapiChatInstance = null;
const apiKey = "58f89212-0e94-4123-8f9e-3bc0dde56fe0";
const vapiSquadId = "f468f8d5-b6bd-44fd-b39e-358278e86404";
let isVapiLoaded = false;
let isVapiChatLoaded = false;
let vapiStarted = false;

// Load VAPI SDK with working CDN
(function (d, t) {
  var g = d.createElement(t), s = d.getElementsByTagName(t)[0];
  g.src = "https://cdn.jsdelivr.net/gh/VapiAI/html-script-tag@latest/dist/assets/index.js";
  g.defer = g.async = true;
  s.parentNode.insertBefore(g, s);

  g.onload = function () {
    try {
      // Voice VAPI instance
      vapiInstance = window.vapiSDK.run({
        apiKey: apiKey,
        squad: vapiSquadId,
        config: {
          position: "bottom-right",
          idle: {
            color: "#7A3FFD",
            type: "pill",
            title: "–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Bagira AI",
            subtitle: "–ì–æ–ª–æ—Å–æ–≤–æ–π —é—Ä. –ø–æ–º–æ—â–Ω–∏–∫",
            icon: "https://unpkg.com/lucide-static@0.321.0/icons/mic.svg"
          }
        }
      });
      
      // Chat VAPI instance
      vapiChatInstance = window.vapiSDK.run({
        apiKey: apiKey,
        squad: vapiSquadId,
        config: {
          position: "bottom-left",
          idle: {
            color: "#10b981",
            type: "pill",
            title: "–ù–∞–ø–∏—Å–∞—Ç—å Bagira AI",
            subtitle: "–¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç",
            icon: "https://unpkg.com/lucide-static@0.321.0/icons/message-circle.svg"
          },
          chat: {
            enabled: true,
            inputPlaceholder: "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à —é—Ä–∏–¥–∏—á–µ—Å–∫–∏–π –≤–æ–ø—Ä–æ—Å...",
            assistantName: "Bagira AI",
            avatarUrl: "data:image/svg+xml,<svg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 100 100'><text y='.9em' font-size='90'>üêæ</text></svg>"
          }
        }
      });
      
      isVapiLoaded = true;
      isVapiChatLoaded = true;
      console.log('VAPI SDK loaded successfully with voice and chat');
      
      // Listen for VAPI messages to trigger booking modal
      const setupMessageListener = (instance, type) => {
        if (instance && instance.on) {
          instance.on('message', (message) => {
            console.log(`VAPI ${type} Message received:`, message);
            
            // Check if assistant is asking for contact details
            if (message.type === 'transcript' && message.transcript) {
              const transcript = message.transcript.toLowerCase();
              if (transcript.includes('phone') || transcript.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || 
                  transcript.includes('–Ω–æ–º–µ—Ä') || transcript.includes('–∫–æ–Ω—Ç–∞–∫—Ç') ||
                  transcript.includes('email') || transcript.includes('–ø–æ—á—Ç')) {
                console.log(`Triggering booking modal from VAPI ${type} message`);
                setTimeout(() => showVapiBookingModal(), 1000);
              }
            }
            
            // Check for function calls
            if (message.type === 'function-call' || 
                (message.content && (message.content.includes('–∑–∞–ø–∏—Å—å') || message.content.includes('booking')))) {
              console.log(`Triggering booking modal from ${type} function call`);
              setTimeout(() => showVapiBookingModal(), 500);
            }
          });
        }
      };
      
      setupMessageListener(vapiInstance, 'voice');
      setupMessageListener(vapiChatInstance, 'chat');
      
      // Hide the original VAPI buttons immediately
      hideOriginalVapiButtons();
      
    } catch (error) {
      console.error('Failed to initialize VAPI SDK:', error);
    }
  };

  g.onerror = function() {
    console.error('Failed to load VAPI SDK from CDN');
  };
})(document, "script");

// Update VAPI button text
const updateVapiButton = (title, subtitle, isChat = false) => {
  const buttonId = isChat ? 'customChatButton' : 'customVapiButton';
  const button = document.getElementById(buttonId);
  if (button) {
    const titleEl = button.querySelector(isChat ? '.vapi-chat-button__title' : '.vapi-button__title');
    const subtitleEl = button.querySelector(isChat ? '.vapi-chat-button__subtitle' : '.vapi-button__subtitle');
    if (titleEl) {
      titleEl.textContent = title;
      titleEl.style.display = 'block';
      titleEl.style.visibility = 'visible';
      titleEl.style.opacity = '1';
    }
    if (subtitleEl) {
      subtitleEl.textContent = subtitle;
      subtitleEl.style.display = 'block';
      subtitleEl.style.visibility = 'visible';
      subtitleEl.style.opacity = '1';
    }
  }
};

// Handle VAPI button click with working implementation
const handleVapiClick = async (isChat = false) => {
  const type = isChat ? 'chat' : 'voice';
  console.log(`Custom VAPI ${type} button clicked`);
  
  const instance = isChat ? vapiChatInstance : vapiInstance;
  const isLoaded = isChat ? isVapiChatLoaded : isVapiLoaded;
  
  if (!isLoaded || !instance) {
    console.log(`VAPI ${type} not loaded yet`);
    updateVapiButton('–ó–∞–≥—Ä—É–∑–∫–∞...', '–ü–æ–¥–æ–∂–¥–∏—Ç–µ', isChat);
    setTimeout(() => {
      updateVapiButton(
        isChat ? '–ù–∞–ø–∏—Å–∞—Ç—å Bagira AI' : '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Bagira AI', 
        isChat ? '–¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç' : '–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫', 
        isChat
      );
    }, 3000);
    return;
  }

  try {
    // Use the original VAPI button functionality by simulating click
    const selector = isChat ? '.vapi-btn[data-position="bottom-left"]' : '.vapi-btn[data-position="bottom-right"]';
    const originalVapiButton = document.querySelector(selector) || document.querySelector('.vapi-btn');
    
    if (originalVapiButton) {
      console.log(`Triggering original VAPI ${type} button`);
      originalVapiButton.click();
      updateVapiButton(
        isChat ? '–û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞...' : '–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...', 
        isChat ? '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —á–∞—Ç–∞' : '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–≤–æ–Ω–∫–∞', 
        isChat
      );
    } else {
      console.log(`Original VAPI ${type} button not found`);
      updateVapiButton('–û—à–∏–±–∫–∞', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', isChat);
      setTimeout(() => {
        updateVapiButton(
          isChat ? '–ù–∞–ø–∏—Å–∞—Ç—å Bagira AI' : '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Bagira AI', 
          isChat ? '–¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç' : '–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫', 
          isChat
        );
      }, 3000);
    }
  } catch (error) {
    console.error(`Error with VAPI ${type} call:`, error);
    updateVapiButton('–û—à–∏–±–∫–∞', '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ', isChat);
    setTimeout(() => {
      updateVapiButton(
        isChat ? '–ù–∞–ø–∏—Å–∞—Ç—å Bagira AI' : '–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Bagira AI', 
        isChat ? '–¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç' : '–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫', 
        isChat
      );
    }, 3000);
  }
};

// Modal Management
const openModal = (modalId) => {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.classList.add('active');
    document.body.style.overflow = 'hidden';
  }
};

const closeModal = (modalId) => {
  const modal = document.getElementById(modalId);
  if (modal) {
    modal.classList.remove('active');
    document.body.style.overflow = '';
  }
};

const showVapiBookingModal = () => {
  openModal('vapiBookingModal');
};

// Form Handlers
const handleDemoForm = (event) => {
  event.preventDefault();
  
  const form = event.target;
  const formData = new FormData(form);
  const messageEl = document.getElementById('demoMessage');
  
  // Simulate form submission
  messageEl.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞—è–≤–∫—É...';
  messageEl.className = 'form__message';
  messageEl.style.display = 'block';
  
  setTimeout(() => {
    messageEl.textContent = '–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ —á–∞—Å–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏.';
    messageEl.className = 'form__message success';
    
    // Reset form after delay
    setTimeout(() => {
      form.reset();
      closeModal('demoModal');
      messageEl.style.display = 'none';
    }, 3000);
  }, 1500);
};

const handleVapiBookingForm = (event) => {
  event.preventDefault();
  
  const form = event.target;
  const phone = document.getElementById('vapiPhone').value;
  const email = document.getElementById('vapiEmail').value;
  const submitButton = form.querySelector('button[type="submit"]');
  const originalButtonText = submitButton.textContent;
  
  // Simple validation
  if (!phone || !email) {
    alert('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
    return;
  }
  
  // Disable button and show loading
  submitButton.disabled = true;
  submitButton.textContent = '–û—Ç–ø—Ä–∞–≤–ª—è–µ–º...';
  
  // Send to webhook
  fetch("https://primary-production-3672.up.railway.app/webhook/bagira-submit", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify({ phone, email })
  })
  .then(response => {
    if (response.ok) {
      alert("–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–∫–æ—Ä–æ –Ω–∞–ø—Ä–∞–≤–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –ø–æ—á—Ç–µ");
    } else {
      alert("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏. ‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.");
    }
    closeModal('vapiBookingModal');
    form.reset();
  })
  .catch(error => {
    console.error("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ä–º—ã Bagira AI:", error);
    alert("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. ‚ùå\n" + (error.message || error));
    closeModal('vapiBookingModal');
  })
  .finally(() => {
    submitButton.disabled = false;
    submitButton.textContent = originalButtonText;
  });
};

// Initialize everything when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOM loaded, initializing Bagira AI...');
  
  // Set current year
  const yearEl = document.getElementById('currentYear');
  if (yearEl) {
    yearEl.textContent = new Date().getFullYear();
  }
  
  // Custom VAPI Button Event
  const customVapiButton = document.getElementById('customVapiButton');
  if (customVapiButton) {
    customVapiButton.addEventListener('click', () => handleVapiClick());
    console.log('Custom VAPI button event listener attached');
    
    // Ensure text is visible initially
    setTimeout(() => {
      updateVapiButton('–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Bagira AI', '–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫', false);
    }, 100);
  }
  
  // Custom Chat Button Event
  const customChatButton = document.getElementById('customChatButton');
  if (customChatButton) {
    customChatButton.addEventListener('click', () => handleVapiClick(true));
    console.log('Custom Chat button event listener attached');
    
    // Ensure text is visible initially
    setTimeout(() => {
      updateVapiButton('–ù–∞–ø–∏—Å–∞—Ç—å Bagira AI', '–¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç', true);
    }, 100);
  }
  
  // Modal Event Listeners
  const setupModalEvents = () => {
    // Demo modal triggers
    const demoButtons = ['navDemoBtn', 'heroMainCTA', 'finalCTA'];
    demoButtons.forEach(id => {
      const btn = document.getElementById(id);
      if (btn) {
        btn.addEventListener('click', () => openModal('demoModal'));
      }
    });
    
    // Video button - scroll to video
    const videoBtn = document.getElementById('heroVideoCTA');
    if (videoBtn) {
      videoBtn.addEventListener('click', () => {
        const videoContainer = document.querySelector('.video-container');
        if (videoContainer) {
          videoContainer.scrollIntoView({ behavior: 'smooth' });
        }
      });
    }
    
    // Close modal events
    const closeDemoBtn = document.getElementById('closeDemoModal');
    if (closeDemoBtn) {
      closeDemoBtn.addEventListener('click', () => closeModal('demoModal'));
    }
    
    const closeVapiBtn = document.getElementById('closeVapiModal');
    if (closeVapiBtn) {
      closeVapiBtn.addEventListener('click', () => closeModal('vapiBookingModal'));
    }
    
    // Click outside to close
    document.addEventListener('click', (e) => {
      if (e.target.classList.contains('modal')) {
        closeModal(e.target.id);
      }
    });
    
    // ESC key to close
    document.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        closeModal('demoModal');
        closeModal('vapiBookingModal');
      }
    });
  };
  
  setupModalEvents();
  
  // Form Event Listeners
  const demoForm = document.getElementById('demoForm');
  if (demoForm) {
    demoForm.addEventListener('submit', handleDemoForm);
  }
  
  const vapiBookingForm = document.getElementById('vapiBookingForm');
  if (vapiBookingForm) {
    vapiBookingForm.addEventListener('submit', handleVapiBookingForm);
  }
  
  // Hide any existing VAPI buttons
  const hideOriginalVapiButtons = () => {
    const selectors = [
      '.vapi-btn',
      '.vapi-widget',
      '[data-vapi]',
      'div[class*="vapi"]:not(#customVapiButton)',
      'button[class*="vapi"]:not(#customVapiButton)'
    ];
    
    selectors.forEach(selector => {
      const elements = document.querySelectorAll(selector);
      elements.forEach(el => {
        if (el.id !== 'customVapiButton' && !el.closest('#customVapiButton')) {
          el.style.display = 'none !important';
          el.style.visibility = 'hidden !important';
          el.style.opacity = '0 !important';
          el.style.pointerEvents = 'none !important';
          el.style.position = 'absolute !important';
          el.style.left = '-9999px !important';
        }
      });
    });
  };
  
  // Store the function globally so VAPI SDK can access it
  window.hideOriginalVapiButtons = hideOriginalVapiButtons;
  
  // Hide original buttons initially and continuously
  hideOriginalVapiButtons();
  setInterval(hideOriginalVapiButtons, 500);
  
  // Smooth scrolling for anchor links
  const smoothScrollLinks = document.querySelectorAll('a[href^="#"]');
  smoothScrollLinks.forEach(link => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const target = document.querySelector(link.getAttribute('href'));
      if (target) {
        target.scrollIntoView({ behavior: 'smooth' });
      }
    });
  });
  
  console.log('Bagira AI website initialized successfully');
});

// Additional VAPI button state monitoring
const monitorVapiButtonStates = () => {
  // Monitor voice button
  const originalVoiceButton = document.querySelector('.vapi-btn[data-position="bottom-right"]') || 
                             document.querySelectorAll('.vapi-btn')[0];
  if (originalVoiceButton) {
    // Check if call is active by looking at button classes
    if (originalVoiceButton.classList.contains('vapi-btn-is-active')) {
      updateVapiButton('–ò–¥–µ—Ç –∑–≤–æ–Ω–æ–∫...', '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è', false);
    } else if (originalVoiceButton.classList.contains('vapi-btn-is-loading')) {
      updateVapiButton('–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ...', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–≤–æ–Ω–∫–∞', false);
    } else {
      updateVapiButton('–ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å Bagira AI', '–ì–æ–ª–æ—Å–æ–≤–æ–π –ø–æ–º–æ—â–Ω–∏–∫', false);
    }
    
    // Monitor for text changes that might indicate booking request
    const buttonText = originalVoiceButton.textContent || originalVoiceButton.innerText || '';
    if (buttonText.toLowerCase().includes('phone') || 
        buttonText.toLowerCase().includes('contact') ||
        buttonText.toLowerCase().includes('—Ç–µ–ª–µ—Ñ–æ–Ω') ||
        buttonText.toLowerCase().includes('–Ω–æ–º–µ—Ä')) {
      console.log('Detected booking request from voice button text');
      setTimeout(() => showVapiBookingModal(), 1000);
    }
  }
  
  // Monitor chat button
  const originalChatButton = document.querySelector('.vapi-btn[data-position="bottom-left"]') || 
                            document.querySelectorAll('.vapi-btn')[1];
  if (originalChatButton) {
    // Check if chat is active
    if (originalChatButton.classList.contains('vapi-btn-is-active')) {
      updateVapiButton('–ß–∞—Ç –∞–∫—Ç–∏–≤–µ–Ω...', '–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è', true);
    } else if (originalChatButton.classList.contains('vapi-btn-is-loading')) {
      updateVapiButton('–û—Ç–∫—Ä—ã—Ç–∏–µ —á–∞—Ç–∞...', '–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —á–∞—Ç–∞', true);
    } else {
      updateVapiButton('–ù–∞–ø–∏—Å–∞—Ç—å Bagira AI', '–¢–µ–∫—Å—Ç–æ–≤—ã–π —á–∞—Ç', true);
    }
    
    // Monitor for text changes that might indicate booking request
    const chatText = originalChatButton.textContent || originalChatButton.innerText || '';
    if (chatText.toLowerCase().includes('phone') || 
        chatText.toLowerCase().includes('contact') ||
        chatText.toLowerCase().includes('—Ç–µ–ª–µ—Ñ–æ–Ω') ||
        chatText.toLowerCase().includes('–Ω–æ–º–µ—Ä')) {
      console.log('Detected booking request from chat button text');
      setTimeout(() => showVapiBookingModal(), 1000);
    }
  }
};

// Monitor VAPI button states
setInterval(monitorVapiButtonStates, 1000);

// Additional monitoring for DOM changes that might indicate VAPI interaction
const observer = new MutationObserver((mutations) => {
  mutations.forEach((mutation) => {
    if (mutation.type === 'childList') {
      mutation.addedNodes.forEach((node) => {
        if (node.nodeType === Node.TEXT_NODE) {
          const text = node.textContent.toLowerCase();
          if (text.includes('phone') || text.includes('—Ç–µ–ª–µ—Ñ–æ–Ω') || 
              text.includes('–Ω–æ–º–µ—Ä') || text.includes('contact')) {
            console.log('Detected contact request from DOM mutation');
            setTimeout(() => showVapiBookingModal(), 1500);
          }
        }
      });
    }
  });
});

// Start observing
setTimeout(() => {
  observer.observe(document.body, {
    childList: true,
    subtree: true,
    characterData: true
  });
}, 2000); 